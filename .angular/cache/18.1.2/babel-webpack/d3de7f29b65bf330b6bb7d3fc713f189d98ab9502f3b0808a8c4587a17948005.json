{"ast":null,"code":"/**\n * @license\n * SPDX-License-Identifier: Apache-2.0\n */\n/* GENERATED CODE, DO NOT MODIFY */\nimport { pure } from '../../../internals/pure.js';\nimport { AttributePolicyAction, SanitizerTable } from './sanitizer_table.js';\nconst ALLOWED_ELEMENTS = ['ARTICLE', 'SECTION', 'NAV', 'ASIDE', 'H1', 'H2', 'H3', 'H4', 'H5', 'H6', 'HEADER', 'FOOTER', 'ADDRESS', 'P', 'HR', 'PRE', 'BLOCKQUOTE', 'OL', 'UL', 'LH', 'LI', 'DL', 'DT', 'DD', 'FIGURE', 'FIGCAPTION', 'MAIN', 'DIV', 'EM', 'STRONG', 'SMALL', 'S', 'CITE', 'Q', 'DFN', 'ABBR', 'RUBY', 'RB', 'RT', 'RTC', 'RP', 'DATA', 'TIME', 'CODE', 'VAR', 'SAMP', 'KBD', 'SUB', 'SUP', 'I', 'B', 'U', 'MARK', 'BDI', 'BDO', 'SPAN', 'BR', 'WBR', 'INS', 'DEL', 'PICTURE', 'PARAM', 'TRACK', 'MAP', 'TABLE', 'CAPTION', 'COLGROUP', 'COL', 'TBODY', 'THEAD', 'TFOOT', 'TR', 'TD', 'TH', 'SELECT', 'DATALIST', 'OPTGROUP', 'OPTION', 'OUTPUT', 'PROGRESS', 'METER', 'FIELDSET', 'LEGEND', 'DETAILS', 'SUMMARY', 'MENU', 'DIALOG', 'SLOT', 'CANVAS', 'FONT', 'CENTER', 'ACRONYM', 'BASEFONT', 'BIG', 'DIR', 'HGROUP', 'STRIKE', 'TT'];\nconst ELEMENT_POLICIES = [['A', new Map([['href', {\n  policyAction: AttributePolicyAction.KEEP_AND_SANITIZE_URL\n}]])], ['AREA', new Map([['href', {\n  policyAction: AttributePolicyAction.KEEP_AND_SANITIZE_URL\n}]])], ['LINK', new Map([['href', {\n  policyAction: AttributePolicyAction.KEEP_AND_USE_RESOURCE_URL_POLICY,\n  conditions: new Map([['rel', new Set(['alternate', 'author', 'bookmark', 'canonical', 'cite', 'help', 'icon', 'license', 'next', 'prefetch', 'dns-prefetch', 'prerender', 'preconnect', 'preload', 'prev', 'search', 'subresource'])]])\n}]])], ['SOURCE', new Map([['src', {\n  policyAction: AttributePolicyAction.KEEP_AND_USE_RESOURCE_URL_POLICY\n}], ['srcset', {\n  policyAction: AttributePolicyAction.KEEP_AND_USE_RESOURCE_URL_POLICY_FOR_SRCSET\n}]])], ['IMG', new Map([['src', {\n  policyAction: AttributePolicyAction.KEEP_AND_USE_RESOURCE_URL_POLICY\n}], ['srcset', {\n  policyAction: AttributePolicyAction.KEEP_AND_USE_RESOURCE_URL_POLICY_FOR_SRCSET\n}]])], ['VIDEO', new Map([['src', {\n  policyAction: AttributePolicyAction.KEEP_AND_USE_RESOURCE_URL_POLICY\n}]])], ['AUDIO', new Map([['src', {\n  policyAction: AttributePolicyAction.KEEP_AND_USE_RESOURCE_URL_POLICY\n}]])]];\nconst ALLOWED_GLOBAL_ATTRIBUTES = ['title', 'aria-atomic', 'aria-autocomplete', 'aria-busy', 'aria-checked', 'aria-current', 'aria-disabled', 'aria-dropeffect', 'aria-expanded', 'aria-haspopup', 'aria-hidden', 'aria-invalid', 'aria-label', 'aria-level', 'aria-live', 'aria-multiline', 'aria-multiselectable', 'aria-orientation', 'aria-posinset', 'aria-pressed', 'aria-readonly', 'aria-relevant', 'aria-required', 'aria-selected', 'aria-setsize', 'aria-sort', 'aria-valuemax', 'aria-valuemin', 'aria-valuenow', 'aria-valuetext', 'alt', 'align', 'autocapitalize', 'autocomplete', 'autocorrect', 'autofocus', 'autoplay', 'bgcolor', 'border', 'cellpadding', 'cellspacing', 'checked', 'color', 'cols', 'colspan', 'controls', 'datetime', 'disabled', 'download', 'draggable', 'enctype', 'face', 'formenctype', 'frameborder', 'height', 'hreflang', 'hidden', 'ismap', 'label', 'lang', 'loop', 'max', 'maxlength', 'media', 'minlength', 'min', 'multiple', 'muted', 'nonce', 'open', 'placeholder', 'preload', 'rel', 'required', 'reversed', 'role', 'rows', 'rowspan', 'selected', 'shape', 'size', 'sizes', 'slot', 'span', 'spellcheck', 'start', 'step', 'summary', 'translate', 'type', 'valign', 'value', 'width', 'wrap', 'itemscope', 'itemtype', 'itemid', 'itemprop', 'itemref'];\nconst GLOBAL_ATTRIBUTE_POLICIES = [['dir', {\n  policyAction: AttributePolicyAction.KEEP_AND_NORMALIZE,\n  conditions: /* #__PURE__ */pure(() => {\n    return new Map([['dir', new Set(['auto', 'ltr', 'rtl'])]]);\n  })\n}], ['async', {\n  policyAction: AttributePolicyAction.KEEP_AND_NORMALIZE,\n  conditions: /* #__PURE__ */pure(() => {\n    return new Map([['async', new Set(['async'])]]);\n  })\n}], ['cite', {\n  policyAction: AttributePolicyAction.KEEP_AND_SANITIZE_URL\n}], ['loading', {\n  policyAction: AttributePolicyAction.KEEP_AND_NORMALIZE,\n  conditions: /* #__PURE__ */pure(() => {\n    return new Map([['loading', new Set(['eager', 'lazy'])]]);\n  })\n}], ['poster', {\n  policyAction: AttributePolicyAction.KEEP_AND_SANITIZE_URL\n}], ['target', {\n  policyAction: AttributePolicyAction.KEEP_AND_NORMALIZE,\n  conditions: /* #__PURE__ */pure(() => {\n    return new Map([['target', new Set(['_self', '_blank'])]]);\n  })\n}]];\n/**\n * Sanitizer table for the default sanitizer configuration\n *\n */\nexport const DEFAULT_SANITIZER_TABLE = new SanitizerTable(new Set(ALLOWED_ELEMENTS), new Map(ELEMENT_POLICIES), new Set(ALLOWED_GLOBAL_ATTRIBUTES), new Map(GLOBAL_ATTRIBUTE_POLICIES));\n/**\n * Sanitizer table used by the CSS sanitizer.\n */\nexport const CSS_SANITIZER_TABLE = new SanitizerTable(new Set( /* #__PURE__ */pure(() => ALLOWED_ELEMENTS.concat(['STYLE']))), new Map(ELEMENT_POLICIES),\n// We allow id, name, and class because they can be used in CSS selectors.\n// Shadow DOM ensures that those names don't clash with other names in the\n// document.\nnew Set( /* #__PURE__ */pure(() => ALLOWED_GLOBAL_ATTRIBUTES.concat(['id', 'name', 'class']))), new Map( /* #__PURE__ */pure(() => GLOBAL_ATTRIBUTE_POLICIES.concat([['style', {\n  policyAction: AttributePolicyAction.KEEP_AND_SANITIZE_STYLE\n}]]))));","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}