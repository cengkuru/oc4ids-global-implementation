{"ast":null,"code":"/**\n * @license\n * SPDX-License-Identifier: Apache-2.0\n */\nimport { createContextualFragment } from '../../dom/globals/range.js';\nimport '../../environment/dev.js';\nimport { createHtmlInternal } from '../../internals/html_impl.js';\n/**\n * Returns a fragment that contains the parsed HTML for `dirtyHtml` without\n * executing any of the potential payload.\n */\nexport function createInertFragment(dirtyHtml, inertDocument) {\n  if (process.env.NODE_ENV !== 'production') {\n    // We are checking if the function was accidentally called with non-inert\n    // document. One observable difference between live and inert documents\n    // is that live document has a `defaultView` equal to `window`, while\n    // inert document has a `defaultView` equal to `null`.\n    if (inertDocument.defaultView) {\n      throw new Error('createInertFragment called with non-inert document');\n    }\n  }\n  const range = inertDocument.createRange();\n  range.selectNode(inertDocument.body);\n  // This call is only used to create an inert tree for the sanitizer to\n  // further process and is never returned directly to the caller. We can't use\n  // a reviewed conversion in order to avoid an import loop.\n  const temporarySafeHtml = createHtmlInternal(dirtyHtml);\n  return createContextualFragment(range, temporarySafeHtml);\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}