{"ast":null,"code":"/**\n * @license\n * SPDX-License-Identifier: Apache-2.0\n */\nimport '../environment/dev.js';\nimport { ensureTokenIsValid, secretToken } from './secrets.js';\nimport { getTrustedTypes, getTrustedTypesPolicy } from './trusted_types.js';\n/**\n * Runtime implementation of `TrustedScript` in browswers that don't support it.\n * script element.\n */\nclass ScriptImpl {\n  constructor(script, token) {\n    ensureTokenIsValid(token);\n    this.privateDoNotAccessOrElseWrappedScript = script;\n  }\n  toString() {\n    return this.privateDoNotAccessOrElseWrappedScript.toString();\n  }\n}\nfunction createTrustedScriptOrPolyfill(script, trusted) {\n  return trusted !== null && trusted !== void 0 ? trusted : new ScriptImpl(script, secretToken);\n}\nconst GlobalTrustedScript = typeof window !== 'undefined' ? window.TrustedScript : undefined;\n/**\n * Also exports the constructor so that instanceof checks work.\n */\nexport const SafeScript = GlobalTrustedScript !== null && GlobalTrustedScript !== void 0 ? GlobalTrustedScript : ScriptImpl;\n/**\n * Builds a new `SafeScript` from the given string, without enforcing\n * safety guarantees. It may cause side effects by creating a Trusted Types\n * policy. This shouldn't be exposed to application developers, and must only be\n * used as a step towards safe builders or safe constants.\n */\nexport function createScriptInternal(script) {\n  var _a;\n  /** @noinline */\n  const noinlineScript = script;\n  return createTrustedScriptOrPolyfill(noinlineScript, (_a = getTrustedTypesPolicy()) === null || _a === void 0 ? void 0 : _a.createScript(noinlineScript));\n}\n/**\n * An empty `SafeScript` constant.\n * Unlike the functions above, using this will not create a policy.\n */\nexport const EMPTY_SCRIPT = /* #__PURE__ */(() => {\n  var _a;\n  return createTrustedScriptOrPolyfill('', (_a = getTrustedTypes()) === null || _a === void 0 ? void 0 : _a.emptyScript);\n})();\n/**\n * Checks if the given value is a `SafeScript` instance.\n */\nexport function isScript(value) {\n  var _a;\n  return ((_a = getTrustedTypes()) === null || _a === void 0 ? void 0 : _a.isScript(value)) || value instanceof ScriptImpl;\n}\n/**\n * Returns the value of the passed `SafeScript` object while ensuring it\n * has the correct type.\n *\n * Returns a native `TrustedScript` or a string if Trusted Types are disabled.\n */\nexport function unwrapScript(value) {\n  var _a;\n  if ((_a = getTrustedTypes()) === null || _a === void 0 ? void 0 : _a.isScript(value)) {\n    return value;\n  } else if (value instanceof ScriptImpl) {\n    return value.privateDoNotAccessOrElseWrappedScript;\n  } else {\n    let message = '';\n    if (process.env.NODE_ENV !== 'production') {\n      message = 'Unexpected type when unwrapping SafeScript';\n    }\n    throw new Error(message);\n  }\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}