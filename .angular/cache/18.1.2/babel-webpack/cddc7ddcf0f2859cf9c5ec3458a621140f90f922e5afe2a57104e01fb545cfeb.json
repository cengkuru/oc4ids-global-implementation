{"ast":null,"code":"/**\n * @license\n * SPDX-License-Identifier: Apache-2.0\n */\nimport '../environment/dev.js';\nimport { createAttributePrefixInternal } from '../internals/attribute_impl.js';\nimport { assertIsTemplateObject } from '../internals/string_literal.js';\nimport { SECURITY_SENSITIVE_ATTRIBUTES } from './sensitive_attributes.js';\n/**\n * Creates a SafeAttributePrefix object from a template literal with no\n * interpolations for attributes that share a common prefix guaranteed to be not\n * security sensitive.\n *\n * The template literal is a prefix that makes it obvious this attribute is not\n * security sensitive. If it doesn't, this function will throw.\n */\nexport function safeAttrPrefix(templ) {\n  if (process.env.NODE_ENV !== 'production') {\n    assertIsTemplateObject(templ, 0);\n  }\n  const attrPrefix = templ[0].toLowerCase();\n  if (process.env.NODE_ENV !== 'production') {\n    if (attrPrefix.indexOf('on') === 0 || 'on'.indexOf(attrPrefix) === 0) {\n      throw new Error(`Prefix '${templ[0]}' does not guarantee the attribute ` + `to be safe as it is also a prefix for event handler attributes` + `Please use 'addEventListener' to set event handlers.`);\n    }\n    SECURITY_SENSITIVE_ATTRIBUTES.forEach(sensitiveAttr => {\n      if (sensitiveAttr.indexOf(attrPrefix) === 0) {\n        throw new Error(`Prefix '${templ[0]}' does not guarantee the attribute ` + `to be safe as it is also a prefix for ` + `the security sensitive attribute '${sensitiveAttr}'. ` + `Please use native or safe DOM APIs to set the attribute.`);\n      }\n    });\n  }\n  return createAttributePrefixInternal(attrPrefix);\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}