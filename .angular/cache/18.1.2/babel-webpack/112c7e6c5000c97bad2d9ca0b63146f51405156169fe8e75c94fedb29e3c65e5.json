{"ast":null,"code":"/**\n * @license\n * SPDX-License-Identifier: Apache-2.0\n */\nimport '../environment/dev.js';\nimport { assertIsTemplateObject } from '../internals/string_literal.js';\nimport { createStyleSheetInternal, unwrapStyleSheet } from '../internals/style_sheet_impl.js';\n/**\n * Creates a SafeStyleSheet object from a template literal (without any\n * embedded expressions).\n *\n * This function is a template literal tag function. It should be called with\n * a template literal that does not contain any expressions. For example,\n *                         safeStyleSheet`foo`;\n * The argument must not have any < or > characters in it. This is so that\n * SafeStyleSheet's contract is preserved, allowing the SafeStyleSheet to\n * correctly be interpreted as a sequence of CSS declarations and without\n * affecting the syntactic structure of any surrounding CSS and HTML.\n *\n * @param templateObj This contains the literal part of the template literal.\n */\nexport function safeStyleSheet(templateObj) {\n  if (process.env.NODE_ENV !== 'production') {\n    assertIsTemplateObject(templateObj, 0);\n  }\n  const styleSheet = templateObj[0];\n  if (process.env.NODE_ENV !== 'production') {\n    if (/</.test(styleSheet)) {\n      throw new Error(`'<' character is forbidden in styleSheet string: ${styleSheet}`);\n    }\n  }\n  return createStyleSheetInternal(styleSheet);\n}\n/**\n * Creates a `SafeStyleSheet` value by concatenating multiple\n * `SafeStyleSheet`s.\n */\nexport function concatStyleSheets(sheets) {\n  return createStyleSheetInternal(sheets.map(unwrapStyleSheet).join(''));\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}