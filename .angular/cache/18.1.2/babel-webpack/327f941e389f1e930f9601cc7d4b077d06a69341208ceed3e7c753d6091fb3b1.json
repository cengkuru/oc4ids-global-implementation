{"ast":null,"code":"/**\n * @license\n * SPDX-License-Identifier: Apache-2.0\n */\n/** @fileoverview Internal implementations of SafeAttributePrefix. */\nimport '../environment/dev.js';\nimport { ensureTokenIsValid, secretToken } from './secrets.js';\n/**\n * A prefix with which an attribute is safe to set using plain strings.\n */\nexport class SafeAttributePrefix {\n  constructor(token, value) {\n    if (process.env.NODE_ENV !== 'production') {\n      ensureTokenIsValid(token);\n    }\n    this.privateDoNotAccessOrElseWrappedAttributePrefix = value;\n  }\n  toString() {\n    return this.privateDoNotAccessOrElseWrappedAttributePrefix;\n  }\n}\nconst AttributePrefixImpl = SafeAttributePrefix;\n/**\n * Builds a new `SafeAttributePrefix` from the given string, without enforcing\n * safety guarantees. This shouldn't be exposed to application developers, and\n * must only be used as a step towards safe builders or safe constants.\n */\nexport function createAttributePrefixInternal(value) {\n  return new AttributePrefixImpl(secretToken, value);\n}\n/**\n * Checks if the given value is a `SafeAttributePrefix` instance.\n */\nexport function isAttributePrefix(value) {\n  return value instanceof SafeAttributePrefix;\n}\n/**\n * Returns the string value of the passed `SafeAttributePrefix` object while\n * ensuring it has the correct type.\n */\nexport function unwrapAttributePrefix(value) {\n  if (isAttributePrefix(value)) {\n    return value.privateDoNotAccessOrElseWrappedAttributePrefix;\n  }\n  let message = '';\n  if (process.env.NODE_ENV !== 'production') {\n    message = `Unexpected type when unwrapping SafeAttributePrefix, got '${value}' of type '${typeof value}'`;\n  }\n  throw new Error(message);\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}