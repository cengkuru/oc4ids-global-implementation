{"ast":null,"code":"/**\n * @license\n * SPDX-License-Identifier: Apache-2.0\n */\nimport '../environment/dev.js';\nimport { createHtmlInternal, unwrapHtml } from '../internals/html_impl.js';\nimport { assertIsTemplateObject } from '../internals/string_literal.js';\n/**\n * Creates a DocumentFragment object from a template literal (without any\n * embedded expressions) using the document context (HTML).\n *\n * Note: use svgFragment instead to create a DocumentFragment belonging to the\n * SVG namespace.\n *\n * This function is a template literal tag function. It should be called with\n * a template literal that does not contain any expressions. For example,\n *                           htmlFragment`foo`;\n *\n * @param templateObj This contains the literal part of the template literal.\n */\nexport function htmlFragment(templateObj) {\n  if (process.env.NODE_ENV !== 'production') {\n    assertIsTemplateObject(templateObj, 0);\n  }\n  const range = document.createRange();\n  return range.createContextualFragment(unwrapHtml(createHtmlInternal(templateObj[0])));\n}\n/**\n * Creates a DocumentFragment object from a template literal (without any\n * embedded expressions), with an SVG context.\n *\n * This function is a template literal tag function. It should be called with\n * a template literal that does not contain any expressions. For example,\n *                           svgFragment`foo`;\n *\n * @param templateObj This contains the literal part of the template literal.\n */\nexport function svgFragment(templateObj) {\n  if (process.env.NODE_ENV !== 'production') {\n    assertIsTemplateObject(templateObj, 0);\n  }\n  const svgElem = document.createElementNS('http://www.w3.org/2000/svg', 'svg');\n  const range = document.createRange();\n  range.selectNodeContents(svgElem);\n  return range.createContextualFragment(unwrapHtml(createHtmlInternal(templateObj[0])));\n}\n/** Converts HTML markup into a node. */\nexport function htmlToNode(html) {\n  const range = document.createRange();\n  const fragment = range.createContextualFragment(unwrapHtml(html));\n  if (fragment.childNodes.length === 1) {\n    return fragment.childNodes[0];\n  } else {\n    return fragment;\n  }\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}