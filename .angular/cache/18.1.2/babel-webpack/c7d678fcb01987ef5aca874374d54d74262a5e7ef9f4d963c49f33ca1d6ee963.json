{"ast":null,"code":"/**\n * @license\n * SPDX-License-Identifier: Apache-2.0\n */\nimport '../environment/dev.js';\nimport { ensureTokenIsValid, secretToken } from './secrets.js';\nimport { getTrustedTypes, getTrustedTypesPolicy } from './trusted_types.js';\n/**\n * Runtime implementation of `TrustedScriptURL` in browsers that don't support\n * it.\n */\nclass ResourceUrlImpl {\n  constructor(url, token) {\n    ensureTokenIsValid(token);\n    this.privateDoNotAccessOrElseWrappedResourceUrl = url;\n  }\n  toString() {\n    return this.privateDoNotAccessOrElseWrappedResourceUrl.toString();\n  }\n}\nconst GlobalTrustedScriptURL = typeof window !== 'undefined' ? window.TrustedScriptURL : undefined;\n/**\n * Also exports the constructor so that instanceof checks work.\n */\nexport const TrustedResourceUrl = GlobalTrustedScriptURL !== null && GlobalTrustedScriptURL !== void 0 ? GlobalTrustedScriptURL : ResourceUrlImpl;\n/**\n * Builds a new `TrustedResourceUrl` from the given string, without\n * enforcing safety guarantees. It may cause side effects by creating a Trusted\n * Types policy. This shouldn't be exposed to application developers, and must\n * only be used as a step towards safe builders or safe constants.\n */\nexport function createResourceUrlInternal(url) {\n  var _a;\n  /** @noinline */\n  const noinlineUrl = url;\n  const trustedScriptURL = (_a = getTrustedTypesPolicy()) === null || _a === void 0 ? void 0 : _a.createScriptURL(noinlineUrl);\n  return trustedScriptURL !== null && trustedScriptURL !== void 0 ? trustedScriptURL : new ResourceUrlImpl(noinlineUrl, secretToken);\n}\n/**\n * Checks if the given value is a `TrustedResourceUrl` instance.\n */\nexport function isResourceUrl(value) {\n  var _a;\n  return ((_a = getTrustedTypes()) === null || _a === void 0 ? void 0 : _a.isScriptURL(value)) || value instanceof ResourceUrlImpl;\n}\n/**\n * Returns the value of the passed `TrustedResourceUrl` object while ensuring it\n * has the correct type.\n *\n * Returns a native `TrustedScriptURL` or a string if Trusted Types are\n * disabled.\n */\nexport function unwrapResourceUrl(value) {\n  var _a;\n  if ((_a = getTrustedTypes()) === null || _a === void 0 ? void 0 : _a.isScriptURL(value)) {\n    return value;\n  } else if (value instanceof ResourceUrlImpl) {\n    return value.privateDoNotAccessOrElseWrappedResourceUrl;\n  } else {\n    let message = '';\n    if (process.env.NODE_ENV !== 'production') {\n      message = 'Unexpected type when unwrapping TrustedResourceUrl';\n    }\n    throw new Error(message);\n  }\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}