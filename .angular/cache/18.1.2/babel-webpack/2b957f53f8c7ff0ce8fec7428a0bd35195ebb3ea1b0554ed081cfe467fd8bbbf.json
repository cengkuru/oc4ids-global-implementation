{"ast":null,"code":"/**\n * @license\n * SPDX-License-Identifier: Apache-2.0\n */\nimport '../environment/dev.js';\nimport { createScriptInternal, unwrapScript } from '../internals/script_impl.js';\nimport { assertIsTemplateObject } from '../internals/string_literal.js';\n/**\n * Creates a SafeScript object from a template literal (without any embedded\n * expressions).\n *\n * This function is a template literal tag function. It should be called with\n * a template literal that does not contain any expressions. For example,\n *                           safeScript`foo`;\n *\n * @param templateObj This contains the literal part of the template literal.\n * @param emptyArgs Expressions that evaluate to the empty string to enable\n *     inline comments.\n */\nexport function safeScript(templateObj, ...emptyArgs) {\n  if (process.env.NODE_ENV !== 'production') {\n    if (emptyArgs.some(a => a !== '')) {\n      throw new Error('safeScript only allows empty string expressions ' + 'to enable inline comments.');\n    }\n    assertIsTemplateObject(templateObj, emptyArgs.length);\n  }\n  return createScriptInternal(templateObj.join(''));\n}\n/** Creates a `SafeScript` value by concatenating multiple `SafeScript`s. */\nexport function concatScripts(scripts) {\n  return createScriptInternal(scripts.map(unwrapScript).join(''));\n}\n/**\n * Converts a serializable value into JSON that is safe to interpolate into a\n * script context. In particular it escapes < characters so that a value of\n * \"&lt/script>\" doesn't break out of the context.\n * @param value The value to serialize.\n */\nexport function valueAsScript(value) {\n  return createScriptInternal(JSON.stringify(value).replace(/</g, '\\\\u003C'));\n}\n/**\n * Creates a `SafeScript` object from a template literal (without any embedded\n * expressions) along with additional arguments that the script should have\n * access to. These arguments will be JSON-encoded and passed to the script as\n * a function call.\n * @example\n * ```ts\n * safeScriptWithArgs`function (name, props) {\n *  console.log(name + ' is ' + props.age);\n * }`('Bob', { 'age': 42 })\n * ```\n * would return a `SafeScript` that represents the following code:\n * ```js\n * (function (name, props) {\n *  console.log(name + ' is ' + props.age);\n * })(\"Bob\",{\"age\":42})\n * ```\n * @note Be careful when passing objects as arguments, as unquoted property\n * names may be changed during compilation.\n * @param templateObj This contains the literal part of the template literal.\n * @param emptyArgs Expressions that evaluate to the empty string to enable\n *     inline comments.\n */\nexport function safeScriptWithArgs(templateObj, ...emptyArgs) {\n  if (process.env.NODE_ENV !== 'production') {\n    if (emptyArgs.some(a => a !== '')) {\n      throw new Error('safeScriptWithArgs only allows empty string expressions ' + 'to enable inline comments.');\n    }\n    assertIsTemplateObject(templateObj, emptyArgs.length);\n  }\n  return (...argValues) => {\n    const values = argValues.map(v => valueAsScript(v).toString());\n    return createScriptInternal(`(${templateObj.join('')})(${values.join(',')})`);\n  };\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}