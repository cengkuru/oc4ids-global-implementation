{"ast":null,"code":"/**\n * @license\n * SPDX-License-Identifier: Apache-2.0\n */\nimport '../environment/dev.js';\nimport { ensureTokenIsValid, secretToken } from './secrets.js';\nimport { getTrustedTypes, getTrustedTypesPolicy } from './trusted_types.js';\n/**\n * Runtime implementation of `TrustedHTML` in browsers that don't support it.\n */\nclass HtmlImpl {\n  constructor(html, token) {\n    ensureTokenIsValid(token);\n    this.privateDoNotAccessOrElseWrappedHtml = html;\n  }\n  toString() {\n    return this.privateDoNotAccessOrElseWrappedHtml.toString();\n  }\n}\nfunction createTrustedHtmlOrPolyfill(html, trusted) {\n  return trusted !== null && trusted !== void 0 ? trusted : new HtmlImpl(html, secretToken);\n}\nconst GlobalTrustedHTML = typeof window !== 'undefined' ? window.TrustedHTML : undefined;\n/**\n * Also exports the constructor so that instanceof checks work.\n */\nexport const SafeHtml = GlobalTrustedHTML !== null && GlobalTrustedHTML !== void 0 ? GlobalTrustedHTML : HtmlImpl;\n/**\n * Builds a new `SafeHtml` from the given string, without enforcing safety\n * guarantees. It may cause side effects by creating a Trusted Types policy.\n * This shouldn't be exposed to application developers, and must only be used as\n * a step towards safe builders or safe constants.\n */\nexport function createHtmlInternal(html) {\n  var _a;\n  /** @noinline */\n  const noinlineHtml = html;\n  return createTrustedHtmlOrPolyfill(noinlineHtml, (_a = getTrustedTypesPolicy()) === null || _a === void 0 ? void 0 : _a.createHTML(noinlineHtml));\n}\n/**\n * An empty `SafeHtml` constant.\n * Unlike the function above, using this will not create a policy.\n */\nexport const EMPTY_HTML = /* #__PURE__ */(() => {\n  var _a;\n  return createTrustedHtmlOrPolyfill('', (_a = getTrustedTypes()) === null || _a === void 0 ? void 0 : _a.emptyHTML);\n})();\n/**\n * Checks if the given value is a `SafeHtml` instance.\n */\nexport function isHtml(value) {\n  var _a;\n  return ((_a = getTrustedTypes()) === null || _a === void 0 ? void 0 : _a.isHTML(value)) || value instanceof HtmlImpl;\n}\n/**\n * Returns the value of the passed `SafeHtml` object while ensuring it\n * has the correct type.\n *\n * Returns a native `TrustedHTML` or a string if Trusted Types are disabled.\n */\nexport function unwrapHtml(value) {\n  var _a;\n  if ((_a = getTrustedTypes()) === null || _a === void 0 ? void 0 : _a.isHTML(value)) {\n    return value;\n  } else if (value instanceof HtmlImpl) {\n    return value.privateDoNotAccessOrElseWrappedHtml;\n  } else {\n    let message = '';\n    if (process.env.NODE_ENV !== 'production') {\n      message = 'Unexpected type when unwrapping SafeHtml';\n    }\n    throw new Error(message);\n  }\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}