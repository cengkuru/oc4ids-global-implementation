{"ast":null,"code":"/**\n * @license\n * SPDX-License-Identifier: Apache-2.0\n */\n/**\n * The name of the Trusted Types policy used by TS safevalues, or empty\n * to disable Trusted Types. This duplicates the 'google#safe', but\n * can be overridden in tests.\n */\nlet trustedTypesPolicyName = 'google#safe';\n/** Helper to retrieve the value of `window.trustedTypes`. */\nfunction trustedTypes() {\n  if (typeof window !== 'undefined') {\n    return window.trustedTypes;\n  }\n  return undefined;\n}\n/**\n * Returns window.trustedTypes if Trusted Types are enabled and supported, or\n * null otherwise.\n */\nexport function getTrustedTypes() {\n  var _a;\n  return trustedTypesPolicyName !== '' ? (_a = trustedTypes()) !== null && _a !== void 0 ? _a : null : null;\n}\n/**\n * The Trusted Types policy used by TS safevalues, or null if Trusted Types\n * are not enabled/supported, or undefined if the policy has not been created\n * yet.\n */\nlet trustedTypesPolicy;\n/**\n * Returns the Trusted Types policy used by TS safevalues, or null if Trusted\n * Types are not enabled/supported. The first call to this function will\n * create the policy.\n */\nexport function getTrustedTypesPolicy() {\n  var _a, _b;\n  if (trustedTypesPolicy === undefined) {\n    try {\n      trustedTypesPolicy = (_b = (_a = getTrustedTypes()) === null || _a === void 0 ? void 0 : _a.createPolicy(trustedTypesPolicyName, {\n        createHTML: s => s,\n        createScript: s => s,\n        createScriptURL: s => s\n      })) !== null && _b !== void 0 ? _b : null;\n    } catch (_c) {\n      // In Chromium versions before 81, trustedTypes.createPolicy throws if\n      // called with a name that is already registered, even if no CSP is set.\n      // Until users have largely migrated to 81 or above, catch the error not\n      // to break the applications functionally. In such case, the code will\n      // fall back to using regular Safe Types.\n      trustedTypesPolicy = null;\n    }\n  }\n  return trustedTypesPolicy;\n}\n/** Helpers for tests. */\nexport const TEST_ONLY = {\n  resetDefaults() {\n    trustedTypesPolicy = undefined;\n    trustedTypesPolicyName = 'google#safe';\n  },\n  setTrustedTypesPolicyName(name) {\n    trustedTypesPolicyName = name;\n  }\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}