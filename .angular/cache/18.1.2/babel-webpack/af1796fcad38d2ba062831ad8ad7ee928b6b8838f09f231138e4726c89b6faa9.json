{"ast":null,"code":"import * as L from 'leaflet';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let AppComponent = /*#__PURE__*/(() => {\n  class AppComponent {\n    constructor(http) {\n      this.http = http;\n      this.title = 'globalSuccess';\n      this.stories = [];\n    }\n    ngOnInit() {\n      this.initMap();\n      this.loadStories();\n    }\n    initMap() {\n      this.map = L.map('map').setView([0, 0], 2);\n      L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {\n        attribution: '© OpenStreetMap contributors'\n      }).addTo(this.map);\n    }\n    loadStories() {\n      this.http.get('assets/data/stories.json').subscribe(data => {\n        this.stories = data.features;\n        this.addMarkers();\n      });\n    }\n    addMarkers() {\n      this.stories.forEach(story => {\n        const marker = L.marker([story.geometry.coordinates[1], story.geometry.coordinates[0]]).addTo(this.map).bindPopup(this.createPopupContent(story));\n        // Color markers based on status\n        const icon = this.getMarkerIcon(story.properties.status);\n        marker.setIcon(icon);\n      });\n    }\n    getMarkerIcon(status) {\n      let color;\n      switch (status) {\n        case 'Active':\n          color = 'green';\n          break;\n        case 'Inactive':\n          color = 'red';\n          break;\n        case 'In Development':\n          color = 'orange';\n          break;\n        default:\n          color = 'blue';\n      }\n      return L.icon({\n        iconUrl: `https://raw.githubusercontent.com/pointhi/leaflet-color-markers/master/img/marker-icon-2x-${color}.png`,\n        shadowUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/0.7.7/images/marker-shadow.png',\n        iconSize: [25, 41],\n        iconAnchor: [12, 41],\n        popupAnchor: [1, -34],\n        shadowSize: [41, 41]\n      });\n    }\n    createPopupContent(story) {\n      return `\n      <div class=\"font-sans\">\n        <h3 class=\"font-bold text-lg\">${story.properties.country}</h3>\n        <p class=\"text-sm\"><strong>Region:</strong> ${story.properties.region}</p>\n        <p class=\"text-sm\"><strong>Status:</strong> ${story.properties.status}</p>\n        <p class=\"text-sm\"><strong>Projects Disclosed:</strong> ${story.properties.projectsDisclosed}</p>\n        <p class=\"text-sm\"><strong>Disclosure Mandate:</strong> ${story.properties.disclosureMandate || 'N/A'}</p>\n        ${story.properties.achievements.length > 0 ? `\n          <p class=\"text-sm mt-2\"><strong>Achievements:</strong></p>\n          <ul class=\"list-disc list-inside text-xs\">\n            ${story.properties.achievements.map(achievement => `<li>${achievement}</li>`).join('')}\n          </ul>\n        ` : ''}\n      </div>\n    `;\n    }\n    toggleListView() {\n      this.showListView = !this.showListView;\n    }\n    selectStory(story) {\n      this.selectedStory = story;\n      const [lng, lat] = story.geometry.coordinates;\n      this.map.setView([lat, lng], 6);\n    }\n    static #_ = this.ɵfac = function AppComponent_Factory(t) {\n      return new (t || AppComponent)(i0.ɵɵdirectiveInject(i1.HttpClient));\n    };\n    static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n      type: AppComponent,\n      selectors: [[\"app-root\"]],\n      decls: 9,\n      vars: 0,\n      consts: [[1, \"flex\", \"flex-col\", \"h-screen\"], [1, \"bg-blue-600\", \"text-white\", \"p-4\"], [1, \"text-2xl\", \"font-bold\"], [1, \"flex-grow\"], [\"id\", \"map\", 1, \"w-full\", \"h-full\"], [1, \"bg-gray-200\", \"p-4\", \"text-center\", \"text-sm\"]],\n      template: function AppComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵelementStart(0, \"div\", 0)(1, \"header\", 1)(2, \"h1\", 2);\n          i0.ɵɵtext(3, \"Global Success Stories\");\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelementStart(4, \"main\", 3);\n          i0.ɵɵelement(5, \"div\", 4);\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(6, \"footer\", 5)(7, \"p\");\n          i0.ɵɵtext(8, \"\\u00A9 2024 Global Success Stories. All rights reserved.\");\n          i0.ɵɵelementEnd()()();\n        }\n      }\n    });\n  }\n  return AppComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}