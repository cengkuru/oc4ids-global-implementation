{"ast":null,"code":"/**\n * @license\n * SPDX-License-Identifier: Apache-2.0\n */\n/**\n * A pattern that matches safe MIME types. Only matches image, video and audio\n * types, with some parameter support (most notably, we haven't implemented the\n * more complex parts like %-encoded characters or non-alphanumerical ones for\n * simplicity's sake). Also, the specs are fairly complex, and they don't\n * necessarily agree with Chrome on some aspects, and so we settled on a subset\n * where the behavior makes sense to all parties involved.\n *\n * The spec is available at https://mimesniff.spec.whatwg.org/ (and see\n * https://tools.ietf.org/html/rfc2397 for data: urls, which override some of\n * it).\n */\nfunction isSafeMimeType(mimeType) {\n  const match = mimeType.match(/^([^;]+)(?:;\\w+=(?:\\w+|\"[\\w;,= ]+\"))*$/i);\n  return (match === null || match === void 0 ? void 0 : match.length) === 2 && (isSafeImageMimeType(match[1]) || isSafeVideoMimeType(match[1]) || isSafeAudioMimeType(match[1]));\n}\nfunction isSafeImageMimeType(mimeType) {\n  return /^image\\/(?:bmp|gif|jpeg|jpg|png|tiff|webp|x-icon|heic|heif)$/i.test(mimeType);\n}\nfunction isSafeVideoMimeType(mimeType) {\n  return /^video\\/(?:mpeg|mp4|ogg|webm|x-matroska|quicktime|x-ms-wmv)$/i.test(mimeType);\n}\nfunction isSafeAudioMimeType(mimeType) {\n  return /^audio\\/(?:3gpp2|3gpp|aac|L16|midi|mp3|mp4|mpeg|oga|ogg|opus|x-m4a|x-matroska|x-wav|wav|webm)$/i.test(mimeType);\n}\n/**\n * Wraps URL.createObjectURL, checking the safety of the source. For blobs, the\n * function validates that the Blob's type is amongst the safe MIME types, and\n * throws if that's not the case. URL.revokeObjectURL should be called on the\n * returned URL to free the resources.\n */\nexport function objectUrlFromSafeSource(source) {\n  // MediaSource support in Safari is limited\n  // https://developer.mozilla.org/en-US/docs/Web/API/MediaSource#browser_compatibility\n  if (typeof MediaSource !== 'undefined' && source instanceof MediaSource) {\n    return URL.createObjectURL(source);\n  }\n  const blob = source;\n  if (!isSafeMimeType(blob.type)) {\n    let message = '';\n    if (process.env.NODE_ENV !== 'production') {\n      message = `unsafe blob MIME type: ${blob.type}`;\n    }\n    throw new Error(message);\n  }\n  return URL.createObjectURL(blob);\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}