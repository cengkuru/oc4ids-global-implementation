{"ast":null,"code":"/**\n * @license\n * SPDX-License-Identifier: Apache-2.0\n */\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n/**\n * @fileoverview\n * Functions which allow fetch() on resourceUrls to be\n * interpreted as SafeHtml or SafeScript.\n */\nimport { createHtmlInternal } from '../../internals/html_impl.js';\nimport { unwrapResourceUrl } from '../../internals/resource_url_impl.js';\nimport { createScriptInternal } from '../../internals/script_impl.js';\nimport { createStyleSheetInternal } from '../../internals/style_sheet_impl.js';\n/**\n * IncorrectTypeError represents an error that can occur with {@link\n * fetchResourceUrl} when the server responds with a content type that would be\n * unsafe for the type of content requested.\n */\nexport class IncorrectContentTypeError extends Error {\n  constructor(url, typeName, contentType) {\n    super(`${url} was requested as a ${typeName}, but the response Content-Type, \"${contentType} is not appropriate for this type of content.`);\n    this.url = url;\n    this.typeName = typeName;\n    this.contentType = contentType;\n  }\n}\n/**\n * This causes the compiler to better optimize `createHtmlInternal` calls, where\n * previously it was building and including the whole module without\n * tree-shaking.\n *\n * TODO(b/254093954) find out why this is and remove this workaround.\n */\nfunction privatecreateHtmlInternal(html) {\n  return createHtmlInternal(html);\n}\n/**\n * fetches a given {@link TrustedResourceUrl},\n * and returns a value which can be turned into a given safe type.\n */\nexport function fetchResourceUrl(u, init) {\n  var _a, _b, _c;\n  return __awaiter(this, void 0, void 0, function* () {\n    const response = yield fetch(unwrapResourceUrl(u).toString(), init);\n    /**\n     * the content type type of the response, excluding any MIME params\n     */\n    const mimeType = (_c = (_b = (_a = response.headers.get('Content-Type')) === null || _a === void 0 ? void 0 : _a.split(';', 2)) === null || _b === void 0 ? void 0 : _b[0]) === null || _c === void 0 ? void 0 : _c.toLowerCase();\n    return {\n      html() {\n        return __awaiter(this, void 0, void 0, function* () {\n          if (mimeType !== 'text/html') {\n            throw new IncorrectContentTypeError(response.url, 'SafeHtml', 'text/html');\n          }\n          const text = yield response.text();\n          return privatecreateHtmlInternal(text);\n        });\n      },\n      script() {\n        return __awaiter(this, void 0, void 0, function* () {\n          // see:\n          // https://html.spec.whatwg.org/multipage/scripting.html#scriptingLanguages\n          if (mimeType !== 'text/javascript' && mimeType !== 'application/javascript') {\n            throw new IncorrectContentTypeError(response.url, 'SafeScript', 'text/javascript');\n          }\n          const text = yield response.text();\n          return createScriptInternal(text);\n        });\n      },\n      styleSheet() {\n        return __awaiter(this, void 0, void 0, function* () {\n          if (mimeType !== 'text/css') {\n            throw new IncorrectContentTypeError(response.url, 'SafeStyleSheet', 'text/css');\n          }\n          const text = yield response.text();\n          return createStyleSheetInternal(text);\n        });\n      }\n    };\n  });\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}